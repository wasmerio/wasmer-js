/* tslint:disable */
/* eslint-disable */
export function __wbg_memfs_free(a: number): void;
export function memfs___wbgd_downcast_token(): number;
export function memfs_new(a: number): void;
export function memfs_from_js(a: number, b: number): void;
export function memfs_readDir(a: number, b: number, c: number, d: number): void;
export function memfs_createDir(a: number, b: number, c: number, d: number): void;
export function memfs_removeDir(a: number, b: number, c: number, d: number): void;
export function memfs_removeFile(a: number, b: number, c: number, d: number): void;
export function memfs_rename(a: number, b: number, c: number, d: number, e: number): number;
export function memfs_metadata(a: number, b: number, c: number, d: number): void;
export function memfs_open(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_virtualfile_free(a: number): void;
export function virtualfile_lastAccessed(a: number): number;
export function virtualfile_lastModified(a: number): number;
export function virtualfile_createdTime(a: number): number;
export function virtualfile_size(a: number): number;
export function virtualfile_setLength(a: number, b: number, c: number): void;
export function virtualfile_arrayBuffer(a: number): number;
export function virtualfile_text(a: number): number;
export function virtualfile_read(a: number, b: number, c: number, d: number): number;
export function virtualfile_write(a: number, b: number, c: number): number;
export function virtualfile_writeString(a: number, b: number, c: number): number;
export function virtualfile_flush(a: number): number;
export function virtualfile_seek(a: number, b: number): number;
export function canonical_abi_realloc(a: number, b: number, c: number, d: number): number;
export function canonical_abi_free(a: number, b: number, c: number): void;
export function __wbg_trap_free(a: number): void;
export function trap___wbgd_downcast_token(): number;
export function __wbg_webthreadpoolinner_free(a: number): void;
export function __wbg_webthreadpool_free(a: number): void;
export function worker_entry_point(a: number): void;
export function wasm_entry_point(a: number, b: number, c: number, d: number): void;
export function __wbg_wasi_free(a: number): void;
export function wasi_new(a: number, b: number): void;
export function wasi_fs(a: number, b: number): void;
export function wasi_tty(a: number): number;
export function wasi_stdin(a: number): number;
export function wasi_stdout(a: number): number;
export function wasi_stderr(a: number): number;
export function wasi_getImports(a: number, b: number, c: number): void;
export function wasi_instantiate(a: number, b: number, c: number, d: number): void;
export function wasi_start(a: number, b: number, c: number): void;
export function __wbg_ttystate_free(a: number): void;
export function __wbg_get_ttystate_cols(a: number): number;
export function __wbg_set_ttystate_cols(a: number, b: number): void;
export function __wbg_get_ttystate_rows(a: number): number;
export function __wbg_set_ttystate_rows(a: number, b: number): void;
export function __wbg_get_ttystate_width(a: number): number;
export function __wbg_set_ttystate_width(a: number, b: number): void;
export function __wbg_get_ttystate_height(a: number): number;
export function __wbg_set_ttystate_height(a: number, b: number): void;
export function __wbg_get_ttystate_stdin_tty(a: number): number;
export function __wbg_set_ttystate_stdin_tty(a: number, b: number): void;
export function __wbg_get_ttystate_stdout_tty(a: number): number;
export function __wbg_set_ttystate_stdout_tty(a: number, b: number): void;
export function __wbg_get_ttystate_stderr_tty(a: number): number;
export function __wbg_set_ttystate_stderr_tty(a: number, b: number): void;
export function __wbg_get_ttystate_echo(a: number): number;
export function __wbg_set_ttystate_echo(a: number, b: number): void;
export function __wbg_get_ttystate_line_buffered(a: number): number;
export function __wbg_set_ttystate_line_buffered(a: number, b: number): void;
export function __wbg_get_ttystate_line_feeds(a: number): number;
export function __wbg_set_ttystate_line_feeds(a: number, b: number): void;
export function ttystate___wbgd_downcast_token(): number;
export function ttystate_new(): number;
export function __wbg_ttysink_free(a: number): void;
export function ttysink_write(a: number, b: number, c: number, d: number): void;
export function ttysink_close(a: number, b: number): void;
export function ttysink_abort(a: number): void;
export function __wbg_ttysource_free(a: number): void;
export function ttysource_pull(a: number, b: number): number;
export function __wbg_tty_free(a: number): void;
export function tty_writable(a: number): number;
export function tty_readable(a: number): number;
export function __wbg_iosink_free(a: number): void;
export function iosink_write(a: number, b: number, c: number, d: number): void;
export function iosink_close(a: number, b: number): void;
export function iosink_abort(a: number): void;
export function __wbg_iosource_free(a: number): void;
export function iosource_pull(a: number, b: number): number;
export function iosource_cancel(a: number): void;
export function ttysource_cancel(a: number): void;
export const memory: WebAssembly.Memory;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_3: WebAssembly.Table;
export const __wbindgen_export_4: WebAssembly.Table;
export function closure2_externref_shim(a: number, b: number, c: number): number;
export function closure74_externref_shim(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __externref_table_dealloc(a: number): void;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __externref_table_alloc(): number;
export function closure38_externref_shim(a: number, b: number, c: number, d: number): void;
export function __wbindgen_thread_destroy(a: number, b: number): void;
export function __wbindgen_start(): void;
